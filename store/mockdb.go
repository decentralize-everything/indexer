// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=store
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	types "github.com/decentralize-everything/indexer/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// BalanceBatchUpdate mocks base method.
func (m *MockDatabase) BalanceBatchUpdate(coinAddressBalances map[string]map[string]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceBatchUpdate", coinAddressBalances)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceBatchUpdate indicates an expected call of BalanceBatchUpdate.
func (mr *MockDatabaseMockRecorder) BalanceBatchUpdate(coinAddressBalances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceBatchUpdate", reflect.TypeOf((*MockDatabase)(nil).BalanceBatchUpdate), coinAddressBalances)
}

// CoinInfoBatchUpdate mocks base method.
func (m *MockDatabase) CoinInfoBatchUpdate(updates map[string]*types.CoinInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoinInfoBatchUpdate", updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// CoinInfoBatchUpdate indicates an expected call of CoinInfoBatchUpdate.
func (mr *MockDatabaseMockRecorder) CoinInfoBatchUpdate(updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoinInfoBatchUpdate", reflect.TypeOf((*MockDatabase)(nil).CoinInfoBatchUpdate), updates)
}

// GetBalancesByAddress mocks base method.
func (m *MockDatabase) GetBalancesByAddress(address string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancesByAddress", address)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancesByAddress indicates an expected call of GetBalancesByAddress.
func (mr *MockDatabaseMockRecorder) GetBalancesByAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancesByAddress", reflect.TypeOf((*MockDatabase)(nil).GetBalancesByAddress), address)
}

// GetCoinInfoById mocks base method.
func (m *MockDatabase) GetCoinInfoById(id string) (*types.CoinInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinInfoById", id)
	ret0, _ := ret[0].(*types.CoinInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinInfoById indicates an expected call of GetCoinInfoById.
func (mr *MockDatabaseMockRecorder) GetCoinInfoById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinInfoById", reflect.TypeOf((*MockDatabase)(nil).GetCoinInfoById), id)
}

// GetCoinInfos mocks base method.
func (m *MockDatabase) GetCoinInfos() ([]*types.CoinInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinInfos")
	ret0, _ := ret[0].([]*types.CoinInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinInfos indicates an expected call of GetCoinInfos.
func (mr *MockDatabaseMockRecorder) GetCoinInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinInfos", reflect.TypeOf((*MockDatabase)(nil).GetCoinInfos))
}

// GetCoinsByAddress mocks base method.
func (m *MockDatabase) GetCoinsByAddress(address string) ([]*types.UnspentCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsByAddress", address)
	ret0, _ := ret[0].([]*types.UnspentCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsByAddress indicates an expected call of GetCoinsByAddress.
func (mr *MockDatabaseMockRecorder) GetCoinsByAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsByAddress", reflect.TypeOf((*MockDatabase)(nil).GetCoinsByAddress), address)
}

// GetCoinsInUtxos mocks base method.
func (m *MockDatabase) GetCoinsInUtxos(utxos []string) ([]*types.UnspentCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsInUtxos", utxos)
	ret0, _ := ret[0].([]*types.UnspentCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsInUtxos indicates an expected call of GetCoinsInUtxos.
func (mr *MockDatabaseMockRecorder) GetCoinsInUtxos(utxos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsInUtxos", reflect.TypeOf((*MockDatabase)(nil).GetCoinsInUtxos), utxos)
}

// UtxoBatchUpdate mocks base method.
func (m *MockDatabase) UtxoBatchUpdate(updates map[string]*types.UnspentCoin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UtxoBatchUpdate", updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UtxoBatchUpdate indicates an expected call of UtxoBatchUpdate.
func (mr *MockDatabaseMockRecorder) UtxoBatchUpdate(updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UtxoBatchUpdate", reflect.TypeOf((*MockDatabase)(nil).UtxoBatchUpdate), updates)
}
